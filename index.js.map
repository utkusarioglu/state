{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/state.ts","webpack:///./src/c_state.ts","webpack:///./node_modules/@utkusarioglu/object-assist/index.js","webpack:///./node_modules/@utkusarioglu/string-assist/index.js","webpack:///./node_modules/@utkusarioglu/starel-globals/index.js","webpack:///./src/t_state.ts","webpack:///./src/m_state.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","M_State","State","channel","custom_id","this","_channel","_id","Math","random","toString","slice","_states","pave","throw_OverloadError","path_key","sniff","console","log","C_State","E_VarNotDefined","subs","instance_state","variable","get_Var","JSON","parse","stringify","vars","entries","forEach","set_Var","hide_id_if_single","refined_list","instance_ids","keys","length","is_empty","variable_name","variable_value","track_test","_tracking_enabled","get_Channel","track_record","Time","Date","getTime","Channel","Namespace","split","Id","get_Id","Variable","Value","undefined","copy_Var","_track_stack","push","E_TrackingOff","map","record","filter","index","stack","indexOf","namespace","filtering_fields","hide_properties","filter_mode","e_filterMode","And","filtered","time","start","end","channels","find","filter_channel","namespaces","filter_namespace","variable_names","filter_variable_name","reduce","total","current","Or","property_paths","attr","assign_Property","property_path","Error","E_PropertyRequired","Separator","Expression","property_class_assoc","assign_Class","property_path_string","E_ChOverload","property_args","Array","isArray","get_Vars","v","E_AlreadyDefined","E_CalledBeforeDeclaration","e","default","u","f","pop","is_Object","has_Function","String","toProperCase","replace","charAt","toUpperCase","substr","toLowerCase","minify","chop","RegExp","match","RI","Path","Root","Directory","Dialogue","Monologue","Extension","Function","window","state_content","_state","get_GlobalNamespace","set_Vars","remove_State"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*\r\n *\tGLOBALS\r\n */\r\nimport \"@utkusarioglu/object-assist\";\r\nimport \"@utkusarioglu/string-assist\";\r\nimport \"@utkusarioglu/starel-globals\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport { C_State } from \"./c_state\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_classStatesList,\r\n    t_instanceId,\r\n    t_variableName,\r\n    t_propertyPath,\r\n    t_trackRecord,\r\n    t_trackRecordStack,\r\n    t_filteringFields,\r\n    e_filterMode,\r\n    t_trackRecordSimplified,\r\n    t_stateMap,\n    t_namespace,\n    t_channel,\n} from \"./t_state\";\r\n\r\n\r\nexport { i_stateInput } from \"./t_state\";\r\nexport { M_State } from \"./m_state\"; \r\n\r\n\r\n/**\r\n * Stores state information for classes\r\n * \r\n * @remarks\r\n * Service State\r\n * */\r\nexport class State {\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tINSTANTIATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n    /** Stores the channel info of the class that State class is instantiated in*/\r\n    protected _channel: t_channel;\r\n    /** Hold state information for all classes that instantiate state class*/\r\n    private static _states: t_classStatesList = {};\r\n    /** id for the particular instance*/\r\n    private _id: t_instanceId;\r\n\r\n    private static _track_stack: t_trackRecordStack = [];\r\n\r\n    private static _tracking_enabled: boolean = true;\r\n\r\n    /**\r\n     * Creates an instance of State class and holds the state information\r\n     * \r\n     * @param channel: channel for which the state is being managed. In most cases. \r\n     * The channel will be a namespace\r\n     * @param custom_id: a custom id that the state class will use to distinguish \r\n     * the current instance from all other instances from the same channel\r\n     * \r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    constructor(channel: t_channel = \"Generic\", custom_id: t_instanceId | null = null) {\r\n\r\n        this._channel = channel;\r\n        this._id = custom_id ? custom_id : Math.random().toString().slice(2);\r\n\r\n        State._states.pave([this._channel, this._id],\r\n            () => {\r\n                this.throw_OverloadError()\r\n            },\r\n            () => {\r\n                return {}\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE VARIABLE\r\n */\r\n\r\n    /**\r\n     * Calls a certain stored variable for the state of the current instance\r\n     * \r\n     * @param path_key supports dot notation for cascaded objects\r\n     * \r\n     * @returns the variable that was previously assigned to the given variable name\r\n     * \r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    get_Var(path_key: string | string[]): any {\r\n\r\n        return (State._states as any).sniff([this._channel, this._id],\r\n            () => {\r\n                console.log(\r\n                    C_State.E_VarNotDefined.subs(this._channel, this._id)\r\n                );\r\n            },\r\n            (instance_state: any) => {\r\n                return instance_state.sniff(path_key,\r\n                    () => {\r\n                        //console.warn(`Variable ${this._channel}/${this._id}/${path_key} is not defined`);\r\n                    },\r\n                    (variable: any) => {\r\n                        return variable;\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets a value to the given variable name\r\n     * \r\n     * @param path_key: supports dot notation for cascaded objects\r\n     * @param value: value for the given path as any\r\n     * \r\n     * ```ts\r\n     * this._state.set_Var(\"object1.object2.object3\", \"variable\")\r\n     * ```\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    set_Var(path_key: string, value: any): this {\r\n        ((State._states as any)[this._channel][this._id] as object).pave(path_key,\r\n            () => {\r\n                //console.log(path_key, \"already defined\");\r\n                return value;\r\n            },\r\n            () => {\r\n                return value;\r\n            }\r\n        )\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calls a certain stored variable for the state of the current instance\r\n     * Unlike get_Var, copy_Var returns a deep copy of the variable\r\n     * \r\n     * @param path_key: supports dot notation for cascaded objects\r\n     * \r\n     * @returns the variable that was previously assigned to the given variable name\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    copy_Var(path_key: string | string[]): any {\r\n        const variable = this.get_Var(path_key);\r\n        if (variable) {\r\n            return JSON.parse(JSON.stringify(variable));\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the given path key contains a variable\r\n     * \r\n     * @param path_key\r\n     * \r\n     * @returns availability of the given variable as boolean\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    has_Var(path_key: string | string[]): boolean {\r\n        return (State._states as any)[this._channel][this._id]\r\n            .sniff(path_key,\r\n                () => {\r\n                    return false;\r\n                },\r\n                () => {\r\n                    return true;\r\n                });\r\n    }\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE VARIABLES\r\n */\r\n\r\n    /**\r\n     * Sets values for multiple variables\r\n     * \r\n     * @param vars: object as the assignment values. see {@link State.set_Var | set_Var } \r\n     * for the format of the individual variables\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    set_Vars(vars: object): this {\r\n        Object.entries(vars).forEach(([key, value]) => {\r\n            this.set_Var(key, value);\r\n        })\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns all variables that belong to the current instance\r\n     * \r\n     * @returns all vars for the instance\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    get_Vars(): object {\r\n        return (State._states as any)[this._channel][this._id];\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE STATES\r\n */\r\n\r\n    /**\r\n     * Returns all states that the state manager stores\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    static get_AllStates(hide_id_if_single: boolean = true): t_classStatesList {\r\n\r\n        if (hide_id_if_single) {\r\n\r\n            let refined_list: t_classStatesList = {};\r\n\r\n            Object.entries(this._states).forEach(([key, value]) => { // channels\r\n                const instance_ids = Object.keys(value);\r\n                if (instance_ids.length < 2) {\r\n                    refined_list[key] = value[instance_ids[0]];\r\n                } else {\r\n                    refined_list[key] = value;\r\n                }\r\n            });\r\n\r\n            return refined_list;\r\n\r\n        } else {\r\n            return State._states;\r\n        }\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE ID\r\n */\r\n    /**\r\n     * Returns randomly assigned instance id\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    get_Id(): string {\r\n        return this._id;\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE CHANNEL\r\n */\r\n\r\n    /**\r\n     * Returns the assigned channel for the given instance\r\n     * \r\n     * @returns channel as string\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    get_Channel(): string {\r\n        return this._channel;\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tIMPLEMENTATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tREMOVE STATE\r\n */\r\n\r\n    /**\r\n     * Removes the state information, and the encapsulating object if there is no other \r\n     * object belonging to the same family\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    remove_State() {\r\n        delete (State._states as any)[this._channel][this._id];\r\n        if ((State._states as any)[this._channel].is_empty()) {\r\n            delete (State._states as any)[this._channel];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the states for all consumers\r\n     * \r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    static remove_AllStates(): void {\r\n        State._states = {};\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tTRACK VARIBLES\r\n */\r\n\r\n    /**\r\n     * Saves the value of a variable with deep copy during execution\r\n     * This method as a static counterpart as well.\r\n     * \r\n     * @param variable_name variable to be saved. If the variable is stored in the\r\n     * state manager\r\n     * @param variable_value value to be saved. If the variable is already stored in the state\r\n     * manager, the value will be pulled from the state \r\n     * @param track_test a test to determine if the current passing of the run shall be saved,\r\n     * default test returns true, meaning all the executions will be saved\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    public track_Variable(\r\n        variable_name: t_variableName | t_propertyPath,\r\n        variable_value: any | undefined = undefined,\r\n        track_test: (track_record: t_trackRecord) => boolean = () => true,\r\n    ): void {\r\n\r\n        if (!State._tracking_enabled) return\r\n\r\n        const channel: t_channel = this.get_Channel();\r\n        const track_record: t_trackRecord = {\r\n            Time: (new Date()).getTime(),\r\n            Channel: channel,\r\n            Namespace: channel.split(\":\")[0].split(\"?\")[0],\r\n            Id: this.get_Id(),\r\n            Variable: variable_name,\r\n            Value: variable_value === undefined\r\n                ? this.copy_Var(variable_name)\r\n                : variable_value\r\n        }\r\n\r\n        if (track_test(track_record)) {\r\n            State._track_stack.push(track_record);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the value of a variable with deep copy during execution.\r\n     * This method has a dynamic counterpart as well\r\n     *\r\n     * @param variable_name variable to be saved. If the variable is stored in the\r\n     * state manager\r\n     * @param variable_value value to be saved. If the variable is already stored in the state\r\n     * manager, the value will be pulled from the state\r\n     * @param track_test a test to determine if the current passing of the run shall be saved,\r\n     * default test returns true, meaning all the executions will be saved\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    public static track_Variable(\r\n        channel: t_channel,\r\n        variable_name: t_variableName | t_propertyPath,\r\n        variable_value: any | undefined = undefined\r\n    ): void {\r\n\r\n        if (!State._tracking_enabled) return\r\n\r\n        const track_record: t_trackRecord = {\r\n            Time: (new Date()).getTime(),\r\n            Channel: channel,\r\n            Namespace: channel.split(\":\")[0].split(\"?\")[0],\r\n            Id: \"-\",\r\n            Variable: variable_name,\r\n            Value: variable_value,\r\n        }\r\n\r\n        State._track_stack.push(track_record);\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tMONITOR TRACKING\r\n */\r\n\r\n    /**\r\n     * Returns the entire track stack\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    public static get_AllTrackRecords(): t_trackRecordStack | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        return State._track_stack;\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns all the channels that have currently been tracked\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    public static get_AllTrackedChannels(): t_channel[] | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        return State._track_stack\r\n            .map((record) => {\r\n                return record.Channel;\r\n            })\r\n            .filter((channel, index, stack) => {\r\n                return stack.indexOf(channel) === index;\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns all the namespaces that have curently been tracked\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    public static get_AllTrackedNamespaces(): t_namespace[] | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        return State._track_stack\r\n            .map((record) => {\r\n                return record.Namespace\r\n            })\r\n            .filter((namespace, index, stack) => {\r\n                return stack.indexOf(namespace) === index;\r\n            });\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns track records that return true for the filter test\r\n     * \r\n     * @param filtering_fields\r\n     * @param hide_properties \r\n     * @param filter_mode\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    public static get_SomeTrackRecords(\r\n        filtering_fields: t_filteringFields,\r\n        hide_properties: boolean = true,\r\n        filter_mode: e_filterMode = e_filterMode.And, // this doesnt work well\r\n    ): t_trackRecordSimplified[] | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        let filtered: t_trackRecordStack = State._track_stack.filter((track_record: t_trackRecord) => {\r\n\r\n            const time: boolean = filtering_fields.sniff(\"Time\",\r\n                () => true,\r\n                ([start, end]) => {\r\n                    return (start === undefined || (track_record.Time >= start)) &&\r\n                        ((end === undefined) || (track_record.Time <= end));\r\n                });\r\n\r\n            const channel: boolean = filtering_fields.sniff(\"Channels\",\r\n                () => true,\r\n                (channels) => {\r\n                    return (channels.find((filter_channel: t_channel) => {\r\n                        return track_record.Channel === filter_channel;\r\n                    }) !== undefined) ||\r\n                        channels.length === 0;\r\n                });\r\n\r\n            const namespace: boolean = filtering_fields.sniff(\"Namespaces\",\r\n                () => true,\r\n                (namespaces) => {\r\n                    return (namespaces.find((filter_namespace: t_channel) => {\r\n                        return track_record.Namespace === filter_namespace;\r\n                    }) !== undefined) ||\r\n                        namespaces.length === 0;\r\n                });\r\n\r\n            const variable_name: boolean = filtering_fields.sniff(\"Variables\",\r\n                () => true,\r\n                (variable_names) => {\r\n                    return (variable_names.find((filter_variable_name: t_variableName) => {\r\n                        return track_record.Variable === filter_variable_name;\r\n                    }) !== undefined) ||\r\n                        variable_names.length === 0;\r\n                });\r\n\r\n            const call_result = filtering_fields.sniff(\"Call\",\r\n                () => true,\r\n                (call: any) => {\r\n                    return (call as (value: t_trackRecord) => boolean)(track_record);\r\n                });\r\n\r\n            //if (value_truncation) {\r\n            //    if (typeof track_record.Value === \"string\") {\r\n            //        track_record.Value = (track_record.Value as string)\r\n            //            .slice(0, (value_truncation as number)) + \"...\";\r\n            //    }\r\n            //    // support for other primitives may be added here\r\n            //}\r\n\r\n            return [\r\n                time,\r\n                channel,\r\n                variable_name,\r\n                call_result,\r\n                namespace,\r\n            ].reduce((total, current) => {\r\n\r\n                total = (total === undefined || total);\r\n\r\n                switch (filter_mode) {\r\n\r\n                    case e_filterMode.And:\r\n                        return total && current;\r\n\r\n                    case e_filterMode.Or:\r\n                        return total || current;\r\n\r\n                }\r\n            });\r\n        });\r\n\r\n        if (hide_properties) {\r\n            filtered = filtered.map((track_record: t_trackRecord) => {\r\n                delete track_record.Channel;\r\n                delete track_record.Time;\r\n                delete track_record.Id;\r\n                return track_record;\r\n            })\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n     * PROPERTIES\r\n     */\r\n    protected set_OptionalProperties(property_paths: t_propertyPath[], attr: any): this {\r\n        property_paths.forEach((property) => { this.assign_Property(property, attr) });\r\n        return this;\r\n    }\r\n\r\n    protected set_RequiredProperties(property_paths: t_propertyPath[], attr: any): this {\r\n        property_paths.forEach((property_path) => {\r\n            if (!this.assign_Property(property_path, attr))\r\n                throw new Error(C_State.E_PropertyRequired.subs(property_path));\r\n        });\r\n        return this;\r\n    }\r\n\r\n    private assign_Property(property_path: t_propertyPath, attr: any): boolean {\r\n        let property_path_arr = property_path.split(Separator.Expression);\r\n        let property = property_path_arr.slice(-1)[0];\r\n        return (attr as object).sniff(property,\r\n            () => {\r\n                return false;\r\n            },\r\n            () => {\r\n                this.set_Var(property_path, attr[property]);\r\n                return true;\r\n            })\r\n    }\r\n\r\n\r\n\r\n    /*\r\n     * CLASSES\r\n     */\r\n    public set_OptionalClasses(property_class_assoc: any, attr: any): this {\r\n        Object.keys(property_class_assoc).forEach((property_path) => {\r\n            this.assign_Class(property_class_assoc, property_path, attr)\r\n        });\r\n        return this;\r\n    }\r\n\r\n    public set_RequiredClasses(property_class_assoc: any, attr: any): this {\r\n        Object.keys(property_class_assoc).forEach((property_path_string) => {\r\n            if (!this.assign_Class(property_class_assoc, property_path_string, attr))\r\n                throw new Error(\r\n                    C_State.E_PropertyRequired.subs(property_path_string)\r\n                );\r\n        });\r\n        return this;\r\n    }\r\n\r\n    private throw_OverloadError(property_path = ['empty']): void {\r\n        throw new Error(C_State.E_ChOverload.subs(\r\n            this._channel,\r\n            this._id,\r\n            JSON.stringify(property_path))\r\n        );\r\n    }\r\n\r\n    private assign_Class(\r\n        property_class_assoc: t_stateMap<ObjectConstructor>,\r\n        property_path_string: string,\r\n        attr: t_stateMap<any>\r\n    ): boolean {\r\n\r\n        let property_path: string[] = property_path_string\r\n            .split(Separator.Expression);\r\n        let property: string = property_path.slice(-1)[0] as string;\r\n\r\n        if (attr.hasOwnProperty(property)) {\r\n\r\n            const property_args = Array.isArray(attr[property])\r\n                ? attr[property]\r\n                : [attr[property]];\r\n\r\n            this.get_Vars().pave(property_path,\r\n                () => {\r\n                    this.throw_OverloadError(property_path)\r\n                },\r\n                () => {\r\n\r\n                    return property_args.map((v: any) => {\r\n                        let a = new property_class_assoc[property_path_string](v);\r\n                        return a;\r\n                    })\r\n\r\n                });\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}","export const C_State = {\r\n    E_VarNotDefined: \"Instance %0/%1 is not defined\",\r\n    E_TrackingOff: \"Tracking Disabled\",\r\n    E_PropertyRequired: \"Property '%0' is required\",\r\n    E_ChOverload: \"Channel overload occured at: %0.%1\\n%2\",\r\n    E_AlreadyDefined: \"State already defined\",\r\n    E_CalledBeforeDeclaration: \"State called before declaration\"\r\n}","!function(t,r){for(var e in r)t[e]=r[e]}(exports,function(t){var r={};function e(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&r&&\"string\"!=typeof t)for(var o in t)e.d(n,o,function(r){return t[r]}.bind(null,o));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,\"a\",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p=\"\",e(e.s=0)}([function(t,r,e){\"use strict\";Object.defineProperty(r,\"__esModule\",{value:!0});var n=e(1);Object.prototype.sniff=function(t,r,e){void 0===r&&(r=function(){return!1}),void 0===e&&(e=function(){return!0});for(var o=this,i=0,u=Array.isArray(t)?t:t.split(n.Separator.Expression);i<u.length;i++){var f=u[i];if(void 0===o[f])return r(o);o=o[f]}return e(o)},Object.prototype.pave=function(t,r,e){void 0===r&&(r=function(){return Object}),void 0===e&&(e=function(){return Object});var o=Array.isArray(t)?t:t.split(n.Separator.Expression),i=o.pop(),u=this,f=function(t){if(void 0===t[i])return t[i]=e()||{},!0;var n=r();return n&&(t[i]=n),!1};if(!(o.length>0))return f(u);u.sniff(o,(function(){for(var t=0,r=o;t<r.length;t++){var e=r[t];u[e]=u[e]?u[e]:{},u=u[e]}return f(u)}),(function(t){return f(t)}))},Object.prototype.is_empty=function(){for(var t in this)if(this.hasOwnProperty(t))return!1;return!0},Object.prototype.is_Object=function(){return this===Object(this)},Object.prototype.has_Function=function(t){return\"function\"==typeof this[t]}},function(t,r,e){\"use strict\";Object.defineProperty(r,\"__esModule\",{value:!0}),r.Separator={Expression:\".\"}}]));\r\n//# sourceMappingURL=index.js.map","!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),String.prototype.toProperCase=function(){return this.replace(/\\w\\S*/g,e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase())},String.prototype.minify=function(){return this.replace(/\\s/g,\"\")},String.prototype.chop=function(e=50){const t=new RegExp(`.{1,${e}}`,\"g\");return this.match(t)||[]},String.prototype.subs=function(...e){return e.reduce((e,t,r)=>e.replace(`%${r}`,t),this)}}]));\r\n//# sourceMappingURL=index.js.map","!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t,n){\"use strict\";(function(e,n){Object.defineProperty(t,\"__esModule\",{value:!0}),e.RI=\"RI\",console.log(\"ri should be available\"),e.Path={Root:n},e.Separator={Directory:\"/\",Expression:\".\",Id:\"-\",Dialogue:\"?\",Monologue:\":\",Namespace:\"/\",Extension:\".\"}}).call(this,n(1),\"/\")},function(e,t){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n}]));\r\n//# sourceMappingURL=index.js.map","/**\r\n * A single variable of the instance\r\n * */\r\nexport type t_state = any;\r\n\r\n/**\r\n * Datatype that set_State accepts for the initial state vars.\r\n * */\r\nexport interface i_stateInput {\r\n    [key: string]: any\r\n}\r\n\r\n/**\r\n * collection of instance variables: the state of the instance\r\n * */\r\nexport type t_classState = { [variable_name: string]: t_state }\r\n\r\n/**\r\n * List of every instance belonging to the namespace\r\n * */\r\nexport type t_classInstancesList = { [instance_id: string]: t_classState }\r\n\r\n/**\r\n * List of every State record\r\n * */\r\nexport type t_classStatesList = { [namespace: string]: t_classInstancesList }\r\n\r\n/**\r\n * Alias for string denoting instance id\r\n * */\r\nexport type t_instanceId = string;\r\n\r\n/**\r\n * Alias for denoting name of a variable\r\n * */\r\nexport type t_variableName = string;\r\n\r\n/**\r\n * Alias for denoting cascaded path for a variable\r\n */\r\nexport type t_propertyPath = string\r\n\r\n/**\r\n * State.tracker record entry\r\n * */\r\nexport type t_trackRecord = {\r\n    Time: t_epoch,\r\n    Channel: t_namespace,\r\n    Namespace: t_namespace,\r\n    Id: t_instanceId,\r\n    Variable: t_variableName,\r\n    Value: any,\r\n}\r\n\r\n/**\r\n * State.tracker record with some properties optional\r\n * */\r\nexport type t_trackRecordSimplified = {\r\n    Time?: t_epoch,\r\n    Channel?: t_namespace,\r\n    Namespace?: t_namespace,\r\n    Id?: t_instanceId,\r\n    Variable: t_variableName,\r\n    Value: any,\r\n}\r\n\r\n/**\r\n * Array of track records\r\n * */\r\nexport type t_trackRecordStack = t_trackRecord[];\r\n\r\n/**\r\n * Holds data about how the tracking filter will work\r\n * Time: start and end epochs\r\n * Namespace: array of namespaces that will be included\r\n * VariableName: array of variable names that will be included\r\n * */\r\nexport type t_filteringFields = {\r\n    Time?: [t_epoch | undefined, t_epoch | undefined],\r\n    Namespaces?: t_namespace[],\r\n    Variables?: t_variableName[],\r\n    Call?: (value:any) => boolean\r\n}\r\n\r\n/**\r\n * Sets the mode that the record tracker filter will use for determining\r\n * Which records to include\r\n * */\r\nexport enum e_filterMode {\r\n    And,\r\n    Or,\r\n}\r\n\r\n/**\r\n * Generic mapping object\r\n * */\r\nexport type t_stateMap<T> = { [key: string]: T }\r\n\r\n\r\n\r\n\r\n/*\r\n *\tSTAND-INS\r\n */\r\n\r\n/**\r\n * A stand-in alias for the t_namespace type from M_Namespace\r\n * */\r\nexport type t_namespace = string;\r\n\r\n/**\r\n * Stand-in type for t_channel from Controller\r\n * */\r\nexport type t_channel = string;\r\n\r\n/**\r\n * Alias for denoting use of number as epoch\r\n * */\r\nexport type t_epoch = number","\r\n/*\r\n *\tCOMMON CLASSES\r\n */\r\nimport { State } from \"./state\";\r\nimport { M_Namespace } from \"@utkusarioglu/namespace\";\r\n\r\n/**\r\n * CONSTANTS\r\n * */\r\nimport { C_State } from \"./c_state\";\r\n\r\n/*\r\n *  DATATYPES\r\n */\r\nimport { i_stateInput } from \"./t_state\";\r\n\r\n/**\r\n * Interface for M_State\r\n * */\r\nexport interface M_State extends M_Namespace {}\r\n\r\n\r\n\r\n/**\r\n * Provides State management functionality\r\n * Requires M_Namespace\r\n * \r\n * @remarks\r\n * Service: State\r\n * */\r\nexport abstract class M_State {\r\n\r\n    private _state!: State;\r\n\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n    /**\r\n     * Initializes the state management\r\n     * \r\n     * @param state_content\r\n     * \r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     */\r\n    initialize_State(state_content?: i_stateInput): this {\r\n\r\n        if (this._state !== undefined) {\r\n            throw new Error(C_State.E_AlreadyDefined);\r\n        }\r\n\r\n        const namespace = this.get_GlobalNamespace();\r\n\r\n        this._state = new State(namespace);\r\n\r\n        if (state_content !== undefined) {\r\n            this._state.set_Vars(state_content);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the managed state content of the class\r\n     *\r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     * */\r\n    get_State(): State {\r\n\r\n        if (!(this._state instanceof State)) {\r\n            throw new Error(C_State.E_CalledBeforeDeclaration)\r\n        }\r\n\r\n        return this._state;\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tIMPLEMENTATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tREMOVE STATE\r\n */\r\n\r\n    /**\r\n     * Removes the instance's state from the State pool\r\n     *\r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     * */\r\n    protected remove_State() {\r\n        this._state.remove_State();\r\n    }\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tTRACK STATE\r\n */\r\n\r\n    /** \r\n     * Alias for State.track_Variable\r\n     * \r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     */\r\n    //protected track_Var = this.get_State().track_Variable;\r\n\r\n}"],"sourceRoot":""}