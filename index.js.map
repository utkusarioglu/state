{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/state.ts","webpack:///./src/c_state.ts","webpack:///./src/index.ts","webpack:///./src/m_state.ts","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@utkusarioglu/object-assist/index.js","webpack:///./node_modules/@utkusarioglu/string-assist/index.js","webpack:///./src/t_state.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","State","channel","custom_id","this","_channel","_id","Math","random","toString","slice","_states","pave","throw_OverloadError","path_key","sniff","console","log","C_State","E_VarNotDefined","subs","instance_state","variable","get_Var","JSON","parse","stringify","vars","entries","forEach","set_Var","hide_id_if_single","refined_list","instance_ids","keys","length","global","set_Separators","Separator","separators","SEPARATOR","is_empty","variable_name","variable_value","track_test","_tracking_enabled","get_Channel","track_record","Time","Date","getTime","Channel","Namespace","split","Id","get_Id","Variable","Value","undefined","copy_Var","_track_stack","push","E_TrackingOff","map","record","filter","index","stack","indexOf","namespace","filtering_fields","hide_properties","filter_mode","e_filterMode","And","filtered","time","start","end","channels","find","filter_channel","namespaces","filter_namespace","variable_names","filter_variable_name","reduce","total","current","Or","property_paths","attr","assign_Property","property_path","Error","E_PropertyRequired","Expression","property_class_assoc","assign_Class","property_path_string","E_ChOverload","property_args","Array","isArray","get_Vars","v","E_AlreadyDefined","E_CalledBeforeDeclaration","M_State","state_content","_state","get_GlobalNamespace","set_Vars","remove_State","g","Function","e","window","default","u","f","pop","is_Object","has_Function","String","toProperCase","replace","charAt","toUpperCase","substr","toLowerCase","minify","chop","RegExp","match"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/*\r\n *\tGLOBALS\r\n */\r\nimport \"@utkusarioglu/object-assist\";\r\nimport \"@utkusarioglu/string-assist\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport { C_State } from \"./c_state\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_classStatesList,\r\n    t_instanceId,\r\n    t_variableName,\r\n    t_propertyPath,\r\n    t_trackRecord,\r\n    t_trackRecordStack,\r\n    t_filteringFields,\r\n    e_filterMode,\r\n    t_trackRecordSimplified,\r\n    t_stateMap,\n    t_namespace,\n    t_channel,\r\n    i_map,\n} from \"./t_state\";\r\n\r\n\r\n\r\n/**\r\n * Stores state information for classes\r\n * \r\n * @remarks\r\n * Service State\r\n * */\r\nexport class State {\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tINSTANTIATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n    /** Stores the channel info of the class that State class is instantiated in*/\r\n    protected _channel: t_channel;\r\n    /** Hold state information for all classes that instantiate state class*/\r\n    private static _states: t_classStatesList = {};\r\n    /** id for the particular instance*/\r\n    private _id: t_instanceId;\r\n\r\n    private static _track_stack: t_trackRecordStack = [];\r\n\r\n    private static _tracking_enabled: boolean = true;\r\n\r\n    private static SEPARATOR: i_map<string>;\r\n\r\n    /**\r\n     * Creates an instance of State class and holds the state information\r\n     * \r\n     * @param channel: channel for which the state is being managed. In most cases. \r\n     * The channel will be a namespace\r\n     * @param custom_id: a custom id that the state class will use to distinguish \r\n     * the current instance from all other instances from the same channel\r\n     * \r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    constructor(channel: t_channel = \"Generic\", custom_id: t_instanceId | null = null) {\r\n\r\n        this._channel = channel;\r\n        this._id = custom_id ? custom_id : Math.random().toString().slice(2);\r\n\r\n        State._states.pave([this._channel, this._id],\r\n            () => {\r\n                this.throw_OverloadError()\r\n            },\r\n            () => {\r\n                return {}\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE VARIABLE\r\n */\r\n\r\n    /**\r\n     * Calls a certain stored variable for the state of the current instance\r\n     * \r\n     * @param path_key supports dot notation for cascaded objects\r\n     * \r\n     * @returns the variable that was previously assigned to the given variable name\r\n     * \r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    get_Var(path_key: string | string[]): any {\r\n\r\n        return (State._states as any).sniff([this._channel, this._id],\r\n            () => {\r\n                console.log(\r\n                    C_State.E_VarNotDefined.subs(this._channel, this._id)\r\n                );\r\n            },\r\n            (instance_state: any) => {\r\n                return instance_state.sniff(path_key,\r\n                    () => {\r\n                        //console.warn(`Variable ${this._channel}/${this._id}/${path_key} is not defined`);\r\n                    },\r\n                    (variable: any) => {\r\n                        return variable;\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets a value to the given variable name\r\n     * \r\n     * @param path_key: supports dot notation for cascaded objects\r\n     * @param value: value for the given path as any\r\n     * \r\n     * ```ts\r\n     * this._state.set_Var(\"object1.object2.object3\", \"variable\")\r\n     * ```\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    set_Var(path_key: string, value: any): this {\r\n        ((State._states as any)[this._channel][this._id] as object).pave(path_key,\r\n            () => {\r\n                //console.log(path_key, \"already defined\");\r\n                return value;\r\n            },\r\n            () => {\r\n                return value;\r\n            }\r\n        )\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calls a certain stored variable for the state of the current instance\r\n     * Unlike get_Var, copy_Var returns a deep copy of the variable\r\n     * \r\n     * @param path_key: supports dot notation for cascaded objects\r\n     * \r\n     * @returns the variable that was previously assigned to the given variable name\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    copy_Var(path_key: string | string[]): any {\r\n        const variable = this.get_Var(path_key);\r\n        if (variable) {\r\n            return JSON.parse(JSON.stringify(variable));\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the given path key contains a variable\r\n     * \r\n     * @param path_key\r\n     * \r\n     * @returns availability of the given variable as boolean\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    has_Var(path_key: string | string[]): boolean {\r\n        return (State._states as any)[this._channel][this._id]\r\n            .sniff(path_key,\r\n                () => {\r\n                    return false;\r\n                },\r\n                () => {\r\n                    return true;\r\n                });\r\n    }\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE VARIABLES\r\n */\r\n\r\n    /**\r\n     * Sets values for multiple variables\r\n     * \r\n     * @param vars: object as the assignment values. see {@link State.set_Var | set_Var } \r\n     * for the format of the individual variables\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    set_Vars(vars: object): this {\r\n        Object.entries(vars).forEach(([key, value]) => {\r\n            this.set_Var(key, value);\r\n        })\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns all variables that belong to the current instance\r\n     * \r\n     * @returns all vars for the instance\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    get_Vars(): object {\r\n        return (State._states as any)[this._channel][this._id];\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE STATES\r\n */\r\n\r\n    /**\r\n     * Returns all states that the state manager stores\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    static get_AllStates(hide_id_if_single: boolean = true): t_classStatesList {\r\n\r\n        if (hide_id_if_single) {\r\n\r\n            let refined_list: t_classStatesList = {};\r\n\r\n            Object.entries(this._states).forEach(([key, value]) => { // channels\r\n                const instance_ids = Object.keys(value);\r\n                if (instance_ids.length < 2) {\r\n                    refined_list[key] = value[instance_ids[0]];\r\n                } else {\r\n                    refined_list[key] = value;\r\n                }\r\n            });\r\n\r\n            return refined_list;\r\n\r\n        } else {\r\n            return State._states;\r\n        }\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE ID\r\n */\r\n    /**\r\n     * Returns randomly assigned instance id\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    get_Id(): string {\r\n        return this._id;\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE CHANNEL\r\n */\r\n\r\n    /**\r\n     * Returns the assigned channel for the given instance\r\n     * \r\n     * @returns channel as string\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    get_Channel(): string {\r\n        return this._channel;\r\n    }\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tHANDLE SEPARATORS\r\n */\r\n\r\n    /**\r\n     * Sets the separators from the global.separator variable if available, \r\n     * if not, uses its own defaults\r\n     * */\r\n    set_Separators_FromGlobal(): void {\r\n        if (global.hasOwnProperty(\"Separator\")) {\r\n            this.set_Separators(\r\n                // @ts-ignore\r\n                global.Separator as i_map<string>\r\n            )\r\n        } else {\r\n            this.set_Separators({\r\n                \"Directory\": \"/\",\r\n                \"Expression\": \".\",\r\n                \"Id\": \"-\",\r\n                \"Dialogue\": \"?\",\r\n                \"Monologue\": \":\",\r\n                \"Namespace\": \"/\",\r\n                \"Extension\": \".\"\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the separators from the provided map\r\n     * \r\n     * @param separators\r\n     */\r\n    set_Separators(separators: i_map<string>): void {\r\n        State.SEPARATOR = separators\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tIMPLEMENTATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tREMOVE STATE\r\n */\r\n\r\n    /**\r\n     * Removes the state information, and the encapsulating object if there is no other \r\n     * object belonging to the same family\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    remove_State() {\r\n        delete (State._states as any)[this._channel][this._id];\r\n        if ((State._states as any)[this._channel].is_empty()) {\r\n            delete (State._states as any)[this._channel];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the states for all consumers\r\n     * \r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    static remove_AllStates(): void {\r\n        State._states = {};\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tTRACK VARIBLES\r\n */\r\n\r\n    /**\r\n     * Saves the value of a variable with deep copy during execution\r\n     * This method as a static counterpart as well.\r\n     * \r\n     * @param variable_name variable to be saved. If the variable is stored in the\r\n     * state manager\r\n     * @param variable_value value to be saved. If the variable is already stored in the state\r\n     * manager, the value will be pulled from the state \r\n     * @param track_test a test to determine if the current passing of the run shall be saved,\r\n     * default test returns true, meaning all the executions will be saved\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    public track_Variable(\r\n        variable_name: t_variableName | t_propertyPath,\r\n        variable_value: any | undefined = undefined,\r\n        track_test: (track_record: t_trackRecord) => boolean = () => true,\r\n    ): void {\r\n\r\n        if (!State._tracking_enabled) return\r\n\r\n        const channel: t_channel = this.get_Channel();\r\n        const track_record: t_trackRecord = {\r\n            Time: (new Date()).getTime(),\r\n            Channel: channel,\r\n            Namespace: channel.split(\":\")[0].split(\"?\")[0],\r\n            Id: this.get_Id(),\r\n            Variable: variable_name,\r\n            Value: variable_value === undefined\r\n                ? this.copy_Var(variable_name)\r\n                : variable_value\r\n        }\r\n\r\n        if (track_test(track_record)) {\r\n            State._track_stack.push(track_record);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the value of a variable with deep copy during execution.\r\n     * This method has a dynamic counterpart as well\r\n     *\r\n     * @param variable_name variable to be saved. If the variable is stored in the\r\n     * state manager\r\n     * @param variable_value value to be saved. If the variable is already stored in the state\r\n     * manager, the value will be pulled from the state\r\n     * @param track_test a test to determine if the current passing of the run shall be saved,\r\n     * default test returns true, meaning all the executions will be saved\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    public static track_Variable(\r\n        channel: t_channel,\r\n        variable_name: t_variableName | t_propertyPath,\r\n        variable_value: any | undefined = undefined\r\n    ): void {\r\n\r\n        if (!State._tracking_enabled) return\r\n\r\n        const track_record: t_trackRecord = {\r\n            Time: (new Date()).getTime(),\r\n            Channel: channel,\r\n            Namespace: channel.split(\":\")[0].split(\"?\")[0],\r\n            Id: \"-\",\r\n            Variable: variable_name,\r\n            Value: variable_value,\r\n        }\r\n\r\n        State._track_stack.push(track_record);\r\n    }\r\n\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tMONITOR TRACKING\r\n */\r\n\r\n    /**\r\n     * Returns the entire track stack\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    public static get_AllTrackRecords(): t_trackRecordStack | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        return State._track_stack;\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns all the channels that have currently been tracked\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    public static get_AllTrackedChannels(): t_channel[] | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        return State._track_stack\r\n            .map((record) => {\r\n                return record.Channel;\r\n            })\r\n            .filter((channel, index, stack) => {\r\n                return stack.indexOf(channel) === index;\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns all the namespaces that have curently been tracked\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     * */\r\n    public static get_AllTrackedNamespaces(): t_namespace[] | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        return State._track_stack\r\n            .map((record) => {\r\n                return record.Namespace\r\n            })\r\n            .filter((namespace, index, stack) => {\r\n                return stack.indexOf(namespace) === index;\r\n            });\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns track records that return true for the filter test\r\n     * \r\n     * @param filtering_fields\r\n     * @param hide_properties \r\n     * @param filter_mode\r\n     *\r\n     * @remarks\r\n     * Class: State\r\n     * Service: State\r\n     */\r\n    public static get_SomeTrackRecords(\r\n        filtering_fields: t_filteringFields,\r\n        hide_properties: boolean = true,\r\n        filter_mode: e_filterMode = e_filterMode.And, // this doesnt work well\r\n    ): t_trackRecordSimplified[] | string {\r\n\r\n        if (!State._tracking_enabled) return C_State.E_TrackingOff\r\n\r\n        let filtered: t_trackRecordStack = State._track_stack.filter((track_record: t_trackRecord) => {\r\n\r\n            const time: boolean = filtering_fields.sniff(\"Time\",\r\n                () => true,\r\n                ([start, end]) => {\r\n                    return (start === undefined || (track_record.Time >= start)) &&\r\n                        ((end === undefined) || (track_record.Time <= end));\r\n                });\r\n\r\n            const channel: boolean = filtering_fields.sniff(\"Channels\",\r\n                () => true,\r\n                (channels) => {\r\n                    return (channels.find((filter_channel: t_channel) => {\r\n                        return track_record.Channel === filter_channel;\r\n                    }) !== undefined) ||\r\n                        channels.length === 0;\r\n                });\r\n\r\n            const namespace: boolean = filtering_fields.sniff(\"Namespaces\",\r\n                () => true,\r\n                (namespaces) => {\r\n                    return (namespaces.find((filter_namespace: t_channel) => {\r\n                        return track_record.Namespace === filter_namespace;\r\n                    }) !== undefined) ||\r\n                        namespaces.length === 0;\r\n                });\r\n\r\n            const variable_name: boolean = filtering_fields.sniff(\"Variables\",\r\n                () => true,\r\n                (variable_names) => {\r\n                    return (variable_names.find((filter_variable_name: t_variableName) => {\r\n                        return track_record.Variable === filter_variable_name;\r\n                    }) !== undefined) ||\r\n                        variable_names.length === 0;\r\n                });\r\n\r\n            const call_result = filtering_fields.sniff(\"Call\",\r\n                () => true,\r\n                (call: any) => {\r\n                    return (call as (value: t_trackRecord) => boolean)(track_record);\r\n                });\r\n\r\n            //if (value_truncation) {\r\n            //    if (typeof track_record.Value === \"string\") {\r\n            //        track_record.Value = (track_record.Value as string)\r\n            //            .slice(0, (value_truncation as number)) + \"...\";\r\n            //    }\r\n            //    // support for other primitives may be added here\r\n            //}\r\n\r\n            return [\r\n                time,\r\n                channel,\r\n                variable_name,\r\n                call_result,\r\n                namespace,\r\n            ].reduce((total, current) => {\r\n\r\n                total = (total === undefined || total);\r\n\r\n                switch (filter_mode) {\r\n\r\n                    case e_filterMode.And:\r\n                        return total && current;\r\n\r\n                    case e_filterMode.Or:\r\n                        return total || current;\r\n\r\n                }\r\n            });\r\n        });\r\n\r\n        if (hide_properties) {\r\n            filtered = filtered.map((track_record: t_trackRecord) => {\r\n                delete track_record.Channel;\r\n                delete track_record.Time;\r\n                delete track_record.Id;\r\n                return track_record;\r\n            })\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n     * PROPERTIES\r\n     */\r\n    protected set_OptionalProperties(property_paths: t_propertyPath[], attr: any): this {\r\n        property_paths.forEach((property) => { this.assign_Property(property, attr) });\r\n        return this;\r\n    }\r\n\r\n    protected set_RequiredProperties(property_paths: t_propertyPath[], attr: any): this {\r\n        property_paths.forEach((property_path) => {\r\n            if (!this.assign_Property(property_path, attr))\r\n                throw new Error(C_State.E_PropertyRequired.subs(property_path));\r\n        });\r\n        return this;\r\n    }\r\n\r\n    private assign_Property(property_path: t_propertyPath, attr: any): boolean {\r\n        let property_path_arr = property_path.split(State.SEPARATOR.Expression);\r\n        let property = property_path_arr.slice(-1)[0];\r\n        return (attr as object).sniff(property,\r\n            () => {\r\n                return false;\r\n            },\r\n            () => {\r\n                this.set_Var(property_path, attr[property]);\r\n                return true;\r\n            })\r\n    }\r\n\r\n\r\n\r\n    /*\r\n     * CLASSES\r\n     */\r\n    public set_OptionalClasses(property_class_assoc: any, attr: any): this {\r\n        Object.keys(property_class_assoc).forEach((property_path) => {\r\n            this.assign_Class(property_class_assoc, property_path, attr)\r\n        });\r\n        return this;\r\n    }\r\n\r\n    public set_RequiredClasses(property_class_assoc: any, attr: any): this {\r\n        Object.keys(property_class_assoc).forEach((property_path_string) => {\r\n            if (!this.assign_Class(property_class_assoc, property_path_string, attr))\r\n                throw new Error(\r\n                    C_State.E_PropertyRequired.subs(property_path_string)\r\n                );\r\n        });\r\n        return this;\r\n    }\r\n\r\n    private throw_OverloadError(property_path = ['empty']): void {\r\n        throw new Error(C_State.E_ChOverload.subs(\r\n            this._channel,\r\n            this._id,\r\n            JSON.stringify(property_path))\r\n        );\r\n    }\r\n\r\n    private assign_Class(\r\n        property_class_assoc: t_stateMap<ObjectConstructor>,\r\n        property_path_string: string,\r\n        attr: t_stateMap<any>\r\n    ): boolean {\r\n\r\n        let property_path: string[] = property_path_string\r\n            .split(State.SEPARATOR.Expression);\r\n        let property: string = property_path.slice(-1)[0] as string;\r\n\r\n        if (attr.hasOwnProperty(property)) {\r\n\r\n            const property_args = Array.isArray(attr[property])\r\n                ? attr[property]\r\n                : [attr[property]];\r\n\r\n            this.get_Vars().pave(property_path,\r\n                () => {\r\n                    this.throw_OverloadError(property_path)\r\n                },\r\n                () => {\r\n\r\n                    return property_args.map((v: any) => {\r\n                        let a = new property_class_assoc[property_path_string](v);\r\n                        return a;\r\n                    })\r\n\r\n                });\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}","export const C_State = {\r\n    E_VarNotDefined: \"Instance %0/%1 is not defined\",\r\n    E_TrackingOff: \"Tracking Disabled\",\r\n    E_PropertyRequired: \"Property '%0' is required\",\r\n    E_ChOverload: \"Channel overload occured at: %0.%1\\n%2\",\r\n    E_AlreadyDefined: \"State already defined\",\r\n    E_CalledBeforeDeclaration: \"State called before declaration\"\r\n}","export { i_stateInput } from \"./t_state\";\r\nexport { M_State } from \"./m_state\"; \r\nexport { State } from \"./state\";","\r\n/*\r\n *\tCOMMON CLASSES\r\n */\r\nimport { State } from \"./state\";\r\nimport { M_Namespace } from \"@utkusarioglu/namespace\";\r\n\r\n/**\r\n * CONSTANTS\r\n * */\r\nimport { C_State } from \"./c_state\";\r\n\r\n/*\r\n *  DATATYPES\r\n */\r\nimport { i_stateInput } from \"./t_state\";\r\n\r\n/**\r\n * Interface for M_State\r\n * */\r\nexport interface M_State extends M_Namespace {}\r\n\r\n\r\n\r\n/**\r\n * Provides State management functionality\r\n * Requires M_Namespace\r\n * \r\n * @remarks\r\n * Service: State\r\n * */\r\nexport abstract class M_State {\r\n\r\n    private _state!: State;\r\n\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n    /**\r\n     * Initializes the state management\r\n     * \r\n     * @param state_content\r\n     * \r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     */\r\n    initialize_State(state_content?: i_stateInput): this {\r\n\r\n        if (this._state !== undefined) {\r\n            throw new Error(C_State.E_AlreadyDefined);\r\n        }\r\n\r\n        const namespace = this.get_GlobalNamespace();\r\n\r\n        this._state = new State(namespace);\r\n\r\n        if (state_content !== undefined) {\r\n            this._state.set_Vars(state_content);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the managed state content of the class\r\n     *\r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     * */\r\n    get_State(): State {\r\n\r\n        if (!(this._state instanceof State)) {\r\n            throw new Error(C_State.E_CalledBeforeDeclaration)\r\n        }\r\n\r\n        return this._state;\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================== Boundary 1 =========\r\n *\r\n *\tIMPLEMENTATION\r\n *\r\n * =============================================================================\r\n */\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tREMOVE STATE\r\n */\r\n\r\n    /**\r\n     * Removes the instance's state from the State pool\r\n     *\r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     * */\r\n    protected remove_State() {\r\n        this._state.remove_State();\r\n    }\r\n\r\n\r\n/* ---------------------------------------------------------- Use Case ---------\r\n *\tTRACK STATE\r\n */\r\n\r\n    /** \r\n     * Alias for State.track_Variable\r\n     * \r\n     * @remarks\r\n     * Class: M_State\r\n     * Service: State\r\n     */\r\n    //protected track_Var = this.get_State().track_Variable;\r\n\r\n}","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","!function(t,r){for(var e in r)t[e]=r[e]}(exports,function(t){var r={};function e(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&r&&\"string\"!=typeof t)for(var o in t)e.d(n,o,function(r){return t[r]}.bind(null,o));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,\"a\",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p=\"\",e(e.s=0)}([function(t,r,e){\"use strict\";Object.defineProperty(r,\"__esModule\",{value:!0});var n=e(1);Object.prototype.sniff=function(t,r,e){void 0===r&&(r=function(){return!1}),void 0===e&&(e=function(){return!0});for(var o=this,i=0,u=Array.isArray(t)?t:t.split(n.Separator.Expression);i<u.length;i++){var f=u[i];if(void 0===o[f])return r(o);o=o[f]}return e(o)},Object.prototype.pave=function(t,r,e){void 0===r&&(r=function(){return Object}),void 0===e&&(e=function(){return Object});var o=Array.isArray(t)?t:t.split(n.Separator.Expression),i=o.pop(),u=this,f=function(t){if(void 0===t[i])return t[i]=e()||{},!0;var n=r();return n&&(t[i]=n),!1};if(!(o.length>0))return f(u);u.sniff(o,(function(){for(var t=0,r=o;t<r.length;t++){var e=r[t];u[e]=u[e]?u[e]:{},u=u[e]}return f(u)}),(function(t){return f(t)}))},Object.prototype.is_empty=function(){for(var t in this)if(this.hasOwnProperty(t))return!1;return!0},Object.prototype.is_Object=function(){return this===Object(this)},Object.prototype.has_Function=function(t){return\"function\"==typeof this[t]}},function(t,r,e){\"use strict\";Object.defineProperty(r,\"__esModule\",{value:!0}),r.Separator={Expression:\".\"}}]));\r\n//# sourceMappingURL=index.js.map","!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),String.prototype.toProperCase=function(){return this.replace(/\\w\\S*/g,e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase())},String.prototype.minify=function(){return this.replace(/\\s/g,\"\")},String.prototype.chop=function(e=50){const t=new RegExp(`.{1,${e}}`,\"g\");return this.match(t)||[]},String.prototype.subs=function(...e){return e.reduce((e,t,r)=>e.replace(`%${r}`,t),this)}}]));\r\n//# sourceMappingURL=index.js.map","/**\r\n * A single variable of the instance\r\n * */\r\nexport type t_state = any;\r\n\r\n/**\r\n * Datatype that set_State accepts for the initial state vars.\r\n * */\r\nexport interface i_stateInput {\r\n    [key: string]: any\r\n}\r\n\r\n/**\r\n * collection of instance variables: the state of the instance\r\n * */\r\nexport type t_classState = { [variable_name: string]: t_state }\r\n\r\n/**\r\n * List of every instance belonging to the namespace\r\n * */\r\nexport type t_classInstancesList = { [instance_id: string]: t_classState }\r\n\r\n/**\r\n * List of every State record\r\n * */\r\nexport type t_classStatesList = { [namespace: string]: t_classInstancesList }\r\n\r\n/**\r\n * Alias for string denoting instance id\r\n * */\r\nexport type t_instanceId = string;\r\n\r\n/**\r\n * Alias for denoting name of a variable\r\n * */\r\nexport type t_variableName = string;\r\n\r\n/**\r\n * Alias for denoting cascaded path for a variable\r\n */\r\nexport type t_propertyPath = string\r\n\r\n/**\r\n * State.tracker record entry\r\n * */\r\nexport type t_trackRecord = {\r\n    Time: t_epoch,\r\n    Channel: t_namespace,\r\n    Namespace: t_namespace,\r\n    Id: t_instanceId,\r\n    Variable: t_variableName,\r\n    Value: any,\r\n}\r\n\r\n/**\r\n * State.tracker record with some properties optional\r\n * */\r\nexport type t_trackRecordSimplified = {\r\n    Time?: t_epoch,\r\n    Channel?: t_namespace,\r\n    Namespace?: t_namespace,\r\n    Id?: t_instanceId,\r\n    Variable: t_variableName,\r\n    Value: any,\r\n}\r\n\r\n/**\r\n * Array of track records\r\n * */\r\nexport type t_trackRecordStack = t_trackRecord[];\r\n\r\n/**\r\n * Holds data about how the tracking filter will work\r\n * Time: start and end epochs\r\n * Namespace: array of namespaces that will be included\r\n * VariableName: array of variable names that will be included\r\n * */\r\nexport type t_filteringFields = {\r\n    Time?: [t_epoch | undefined, t_epoch | undefined],\r\n    Namespaces?: t_namespace[],\r\n    Variables?: t_variableName[],\r\n    Call?: (value:any) => boolean\r\n}\r\n\r\n/**\r\n * Sets the mode that the record tracker filter will use for determining\r\n * Which records to include\r\n * */\r\nexport enum e_filterMode {\r\n    And,\r\n    Or,\r\n}\r\n\r\n/**\r\n * Generic mapping object\r\n * */\r\nexport type t_stateMap<T> = { [key: string]: T }\r\n\r\n\r\n\r\n\r\n/*\r\n *\tSTAND-INS\r\n */\r\n\r\n/**\r\n * A stand-in alias for the t_namespace type from M_Namespace\r\n * */\r\nexport type t_namespace = string;\r\n\r\n/**\r\n * Stand-in type for t_channel from Controller\r\n * */\r\nexport type t_channel = string;\r\n\r\n/**\r\n * Alias for denoting use of number as epoch\r\n * */\r\nexport type t_epoch = number\r\n\r\nexport type i_map<T> = {\r\n    [key: string]: T\r\n}"],"sourceRoot":""}